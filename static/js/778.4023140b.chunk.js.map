{"version":3,"file":"static/js/778.4023140b.chunk.js","mappings":"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","sources":["pages/MovieDetailsPage.jsx","utils/hooks/useMovieDetails.jsx","utils/api/apiMoviedb.jsx"],"sourcesContent":["import { Outlet, Link, useParams, useLocation,  } from 'react-router-dom';\nimport { useMovieDetails } from 'utils/hooks/useMovieDetails';\nimport { Suspense,  } from 'react';\n\n\n\n// const CastPage = lazy(() => import('./CastPage'));\n// const ReviewsPage = lazy(() => import('./ReviewsPage'));\n// const ErrorFallback = () => <div>Something went wrong...</div>;\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const { movieDetails } = useMovieDetails(movieId);\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  return (\n    <div>\n      <Link to={backLinkHref}>\n        <button type=\"button\">Go back</button>\n      </Link>\n\n      <h2>\n        {movieDetails.title} (\n        {movieDetails.release_date\n          ? movieDetails.release_date.substring(0, 4)\n          : ''}\n        )\n      </h2>\n\n      <img\n        src={`https://image.tmdb.org/t/p/w300_and_h450_bestv2${movieDetails.poster_path}`}\n        alt=\"{movieDetails.original_title}\"\n      />\n\n      <p>\n        User Score:{' '}\n        {movieDetails.vote_average\n          ? Math.fround(movieDetails.vote_average * 10).toFixed(0)\n          : ''}\n        %\n      </p>\n      <h3>Overview</h3>\n      <p>{movieDetails.overview}</p>\n\n      <h4>Genres</h4>\n      <p>\n        {movieDetails.genres\n          ? movieDetails.genres.map(genre => genre.name).join(' ')\n          : ''}\n      </p>\n\n      <p>Additional information</p>\n\n      <ul>\n        <li>\n          <Link to={`${movieId}/cast`}>Cast</Link>\n        </li>\n        <li>\n          <Link to={`${movieId}/reviews`}>Reviews</Link>\n        </li>\n      </ul>\n\n      <Suspense fallback={<div>Loading...</div>} >\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n","import * as API from '../api/apiMoviedb';\nimport { useState, useEffect } from 'react';\n\nexport const useMovieDetails = (movieId) => {\n  const [movieDetails, setMovieDetails] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchMovieDetails() {\n      const details = await API.getMovieDetails(movieId);\n      setMovieDetails(details);\n    }\n    fetchMovieDetails();\n  }, [movieId]);\n\n  return { movieDetails };\n};\n","import axios from 'axios';\n\nconst API_KEY = 'f864ef6a91b9e0820f1a60a4087912c5';\nconst BASE_URL ='https://api.themoviedb.org/3/';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\naxios.defaults.baseURL = BASE_URL;\n\nexport const getTrending = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  const movies = response.data.results.map(({ id, title }) => ({ id, title }));\n  return movies;\n};\n\nexport const searchMovies = async inputValue => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${inputValue}&language=en-US&page=1`\n  );\n  const movies = response.data.results.map(({ id, title }) => ({ id, title }));\n  return movies;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  const movie = response.data;\n  return movie;\n};\n\nexport const getMovieCredits = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const credits = response.data.cast.map(\n    ({ name, character, profile_path, id }) => ({\n      name,\n      character,\n      profile_path,\n      id,\n    })\n  );\n  return credits;\n};\n\nexport const getMoviesReviews = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const reviews = response.data.results.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n  return reviews;\n};\n\n"],"names":["movieId","useParams","useState","movieDetails","setMovieDetails","useEffect","API","details","fetchMovieDetails","useMovieDetails","backLinkHref","useLocation","state","from","to","type","title","release_date","substring","src","poster_path","alt","vote_average","Math","fround","toFixed","overview","genres","map","genre","name","join","Suspense","fallback","API_KEY","axios","getTrending","response","movies","data","results","id","searchMovies","inputValue","getMovieDetails","movie","getMovieCredits","moviesId","credits","cast","character","profile_path","getMoviesReviews","reviews","author","content"],"sourceRoot":""}