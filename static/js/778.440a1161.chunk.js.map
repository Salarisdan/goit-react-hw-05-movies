{"version":3,"file":"static/js/778.440a1161.chunk.js","mappings":"uQA4DA,EAzDyB,WAAO,IAAD,MAE7B,ECF6B,SAACA,GAC9B,OAAwCC,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGACwBC,EAAAA,GAAoBL,GAD5C,OACQM,EADR,OAEEH,EAAgBG,GAFlB,4CADc,uBAAC,WAAD,wBAKdC,EACD,GAAE,CAACP,IAEG,CAAEE,aAAAA,EACV,CDV0BM,EADLC,EAAAA,EAAAA,MAAZT,SACAE,EAAR,EAAQA,aAEFQ,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAgB7C,OACE,4BACE,SAAC,KAAD,CAAMC,GAAIJ,EAAV,UACE,mBAAQK,KAAK,SAAb,wBAGF,0BACGb,EAAac,MADhB,KAnBEd,EAAae,aACRf,EAAae,aAAaC,UAAU,EAAG,GAEzC,GAgBL,QAIA,gBACEC,IAAG,yDAAoDjB,EAAakB,aACpEC,IAAI,mCAGN,wCArBEnB,EAAaoB,aACRC,KAAKC,OAAmC,GAA5BtB,EAAaoB,cAAmBG,QAAQ,GAAK,IAE3D,OAmBL,sCACA,uBAAIvB,EAAawB,YAEjB,oCACA,iCAAIxB,EAAayB,cAAjB,aAAI,EAAqBC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,QAEvD,mDACA,2BACE,yBACE,SAAC,KAAD,CAAMjB,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAIJ,SAAC,KAAD,MAGL,C,+LExDKkB,EAAU,mCAIhBC,EAAAA,EAAAA,SAAAA,QAFE,6BAIK,IAAMC,EAAW,mCAAG,sGACFD,EAAAA,EAAAA,IAAA,sCAAyCD,IADvC,cACnBG,EADmB,OAEnBC,EAASD,EAASE,KAAKC,QAAQV,KAAI,kBAAoB,CAAEW,GAAtB,EAAGA,GAAuBvB,MAA1B,EAAOA,MAAP,IAFhB,kBAGlBoB,GAHkB,2CAAH,qDAMXI,EAAY,mCAAG,WAAMC,GAAN,yFACHR,EAAAA,EAAAA,IAAA,gCACID,EADJ,kBACqBS,EADrB,2BADG,cACpBN,EADoB,OAIpBC,EAASD,EAASE,KAAKC,QAAQV,KAAI,kBAAoB,CAAEW,GAAtB,EAAGA,GAAuBvB,MAA1B,EAAOA,MAAP,IAJf,kBAKnBoB,GALmB,2CAAH,sDAQZM,EAAe,mCAAG,WAAM1C,GAAN,yFACNiC,EAAAA,EAAAA,IAAA,iBACXjC,EADW,oBACQgC,EADR,oBADM,cACvBG,EADuB,OAIvBQ,EAAQR,EAASE,KAJM,kBAKtBM,GALsB,2CAAH,sDAQfC,EAAe,mCAAG,WAAMC,GAAN,yFACNZ,EAAAA,EAAAA,IAAA,iBACXY,EADW,4BACiBb,EADjB,oBADM,cACvBG,EADuB,OAIvBW,EAAUX,EAASE,KAAKU,KAAKnB,KACjC,kBAA4C,CAC1CE,KADF,EAAGA,KAEDkB,UAFF,EAASA,UAGPC,aAHF,EAAoBA,aAIlBV,GAJF,EAAkCA,GAAlC,IAL2B,kBAYtBO,GAZsB,2CAAH,sDAefI,EAAgB,mCAAG,WAAML,GAAN,yFACPZ,EAAAA,EAAAA,IAAA,iBACXY,EADW,4BACiBb,EADjB,2BADO,cACxBG,EADwB,OAIxBgB,EAAUhB,EAASE,KAAKC,QAAQV,KAAI,kBAA8B,CACtEwB,OADwC,EAAGA,OAE3CC,QAFwC,EAAWA,QAGnDd,GAHwC,EAAoBA,GAApB,IAJZ,kBASvBY,GATuB,2CAAH,qD","sources":["pages/MovieDetailsPage.jsx","utils/hooks/useMovieDetails.jsx","utils/api/apiMoviedb.jsx"],"sourcesContent":["import { Outlet, Link, useParams, useLocation } from 'react-router-dom';\nimport { useMovieDetails } from 'utils/hooks/useMovieDetails';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const { movieDetails } = useMovieDetails(movieId);\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  const getReleaseYear = () => {\n    if (movieDetails.release_date) {\n      return movieDetails.release_date.substring(0, 4);\n    }\n    return '';\n  };\n\n  const getVotePercentage = () => {\n    if (movieDetails.vote_average) {\n      return Math.fround(movieDetails.vote_average * 10).toFixed(0) + '%';\n    }\n    return '';\n  };\n\n  return (\n    <div>\n      <Link to={backLinkHref}>\n        <button type=\"button\">Go back</button>\n      </Link>\n\n      <h2>\n        {movieDetails.title} ({getReleaseYear()})\n      </h2>\n\n      <img\n        src={`https://image.tmdb.org/t/p/w300_and_h450_bestv2${movieDetails.poster_path}`}\n        alt=\"{movieDetails.original_title}\"\n      />\n\n      <p>User Score: {getVotePercentage()}</p>\n      <h3>Overview</h3>\n      <p>{movieDetails.overview}</p>\n\n      <h4>Genres</h4>\n      <p>{movieDetails.genres?.map(genre => genre.name).join(' ')}</p>\n\n      <p>Additional information</p>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n","import * as API from '../api/apiMoviedb';\nimport { useState, useEffect } from 'react';\n\nexport const useMovieDetails = (movieId) => {\n  const [movieDetails, setMovieDetails] = useState(null);\n\n  useEffect(() => {\n    async function fetchMovieDetails() {\n      const details = await API.getMovieDetails(movieId);\n      setMovieDetails(details);\n    }\n    fetchMovieDetails();\n  }, [movieId]);\n\n  return { movieDetails };\n};\n","import axios from 'axios';\n\nconst API_KEY = 'f864ef6a91b9e0820f1a60a4087912c5';\nconst BASE_URL =\n  'https://api.themoviedb.org';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const getTrending = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  const movies = response.data.results.map(({ id, title }) => ({ id, title }));\n  return movies;\n};\n\nexport const searchMovies = async inputValue => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${inputValue}&language=en-US&page=1`\n  );\n  const movies = response.data.results.map(({ id, title }) => ({ id, title }));\n  return movies;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  const movie = response.data;\n  return movie;\n};\n\nexport const getMovieCredits = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const credits = response.data.cast.map(\n    ({ name, character, profile_path, id }) => ({\n      name,\n      character,\n      profile_path,\n      id,\n    })\n  );\n  return credits;\n};\n\nexport const getMoviesReviews = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const reviews = response.data.results.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n  return reviews;\n};\n"],"names":["movieId","useState","movieDetails","setMovieDetails","useEffect","API","details","fetchMovieDetails","useMovieDetails","useParams","backLinkHref","useLocation","state","from","to","type","title","release_date","substring","src","poster_path","alt","vote_average","Math","fround","toFixed","overview","genres","map","genre","name","join","API_KEY","axios","getTrending","response","movies","data","results","id","searchMovies","inputValue","getMovieDetails","movie","getMovieCredits","moviesId","credits","cast","character","profile_path","getMoviesReviews","reviews","author","content"],"sourceRoot":""}