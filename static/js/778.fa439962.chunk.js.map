{"version":3,"file":"static/js/778.fa439962.chunk.js","mappings":"uQAQMA,EAAmB,SAAC,GAAkB,IAAD,EAAfC,EAAe,EAAfA,SAClBC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,ECP6B,SAACA,GAC9B,OAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGACwBC,EAAAA,GAAoBN,GAD5C,OACQO,EADR,OAEEH,EAAgBG,GAFlB,4CADc,uBAAC,WAAD,wBAKdC,EACD,GAAE,CAACR,IAEG,CAAEG,aAAAA,EACV,CDLqCM,CAAgBT,GAA5CG,EAAR,EAAQA,aAAcO,EAAtB,EAAsBA,UAEhBC,GADWZ,EAASa,OAAS,CAAC,GAA5BC,MACqB,IAgB7B,OACE,4BACE,SAAC,KAAD,CAAMC,GAAIH,EAAV,UACE,mBAAQI,KAAK,SAAb,uBAGDL,GACC,uCAEA,iCACE,0BACGP,EAAaa,MADhB,KAvBFb,EAAac,aACRd,EAAac,aAAaC,UAAU,EAAG,GAEzC,GAoBD,QAIA,gBACEC,IAAG,yDAAoDhB,EAAaiB,aACpEC,IAAKlB,EAAamB,kBAGpB,wCAzBFnB,EAAaoB,aACRC,KAAKC,MAAkC,GAA5BtB,EAAaoB,cAAmBG,QAAQ,GAAK,IAE1D,OAuBD,sCACA,uBAAIvB,EAAawB,YAEjB,oCACA,iCAAIxB,EAAayB,cAAjB,aAAI,EAAqBC,KAAI,SAACC,GAAD,OAAWA,EAAMC,IAAjB,IAAuBC,KAAK,QAEzD,mDACA,2BACE,yBACE,SAAC,KAAD,CAAMlB,GAAE,UAAKd,EAAL,SAAR,qBAEF,yBACE,SAAC,KAAD,CAAMc,GAAE,UAAKd,EAAL,YAAR,2BAIJ,SAAC,EAAAiC,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,WAMX,EAUDpC,EAAiBqC,aAAe,CAC9BpC,SAAU,CACRa,MAAO,CACLC,KAAM,OAKZ,O,+LEvFMuB,EAAU,mCAGhBC,EAAAA,EAAAA,SAAAA,QAFgB,gCAIT,IAAMC,EAAW,mCAAG,sGACFD,EAAAA,EAAAA,IAAA,sCAAyCD,IADvC,cACnBG,EADmB,OAEnBC,EAASD,EAASE,KAAKC,QAAQb,KAAI,kBAAoB,CAAEc,GAAtB,EAAGA,GAAuB3B,MAA1B,EAAOA,MAAP,IAFhB,kBAGlBwB,GAHkB,2CAAH,qDAMXI,EAAY,mCAAG,WAAMC,GAAN,yFACHR,EAAAA,EAAAA,IAAA,gCACID,EADJ,kBACqBS,EADrB,2BADG,cACpBN,EADoB,OAIpBC,EAASD,EAASE,KAAKC,QAAQb,KAAI,kBAAoB,CAAEc,GAAtB,EAAGA,GAAuB3B,MAA1B,EAAOA,MAAP,IAJf,kBAKnBwB,GALmB,2CAAH,sDAQZM,EAAe,mCAAG,WAAM9C,GAAN,yFACNqC,EAAAA,EAAAA,IAAA,iBACXrC,EADW,oBACQoC,EADR,oBADM,cACvBG,EADuB,OAIvBQ,EAAQR,EAASE,KAJM,kBAKtBM,GALsB,2CAAH,sDAQfC,EAAe,mCAAG,WAAMC,GAAN,yFACNZ,EAAAA,EAAAA,IAAA,iBACXY,EADW,4BACiBb,EADjB,oBADM,cACvBG,EADuB,OAIvBW,EAAUX,EAASE,KAAKU,KAAKtB,KACjC,kBAA4C,CAC1CE,KADF,EAAGA,KAEDqB,UAFF,EAASA,UAGPC,aAHF,EAAoBA,aAIlBV,GAJF,EAAkCA,GAAlC,IAL2B,kBAYtBO,GAZsB,2CAAH,sDAefI,EAAgB,mCAAG,WAAML,GAAN,yFACPZ,EAAAA,EAAAA,IAAA,iBACXY,EADW,4BACiBb,EADjB,2BADO,cACxBG,EADwB,OAIxBgB,EAAUhB,EAASE,KAAKC,QAAQb,KAAI,kBAA8B,CACtE2B,OADwC,EAAGA,OAE3CC,QAFwC,EAAWA,QAGnDd,GAHwC,EAAoBA,GAApB,IAJZ,kBASvBY,GATuB,2CAAH,qD","sources":["pages/MovieDetailsPage.jsx","utils/hooks/useMovieDetails.jsx","utils/api/apiMoviedb.jsx"],"sourcesContent":["import { Link, Outlet, useParams,  } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useMovieDetails } from 'utils/hooks/useMovieDetails';\nimport React, { Suspense } from 'react';\n\n// const Cast = React.lazy(() => import('./Cast'));\n// const Reviews = React.lazy(() => import('./Reviews'));\n\nconst MovieDetailsPage = ({ location }) => {\n  const { movieId } = useParams();\n  const { movieDetails, isLoading } = useMovieDetails(movieId);\n  const { from } = location.state || {};\n  const backLinkHref = from || '/';\n\n  const getReleaseYear = () => {\n    if (movieDetails.release_date) {\n      return movieDetails.release_date.substring(0, 4);\n    }\n    return '';\n  };\n\n  const getVotePercentage = () => {\n    if (movieDetails.vote_average) {\n      return Math.round(movieDetails.vote_average * 10).toFixed(0) + '%';\n    }\n    return '';\n  };\n\n  return (\n    <div>\n      <Link to={backLinkHref}>\n        <button type=\"button\">Go back</button>\n      </Link>\n\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          <h2>\n            {movieDetails.title} ({getReleaseYear()})\n          </h2>\n\n          <img\n            src={`https://image.tmdb.org/t/p/w300_and_h450_bestv2${movieDetails.poster_path}`}\n            alt={movieDetails.original_title}\n          />\n\n          <p>User Score: {getVotePercentage()}</p>\n          <h3>Overview</h3>\n          <p>{movieDetails.overview}</p>\n\n          <h4>Genres</h4>\n          <p>{movieDetails.genres?.map((genre) => genre.name).join(' ')}</p>\n\n          <p>Additional information</p>\n          <ul>\n            <li>\n              <Link to={`${movieId}/cast`}>Cast</Link>\n            </li>\n            <li>\n              <Link to={`${movieId}/reviews`}>Reviews</Link>\n            </li>\n          </ul>\n\n          <Suspense fallback={<div>Loading...</div>}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </div>\n  );\n};\n\nMovieDetailsPage.propTypes = {\n  location: PropTypes.shape({\n    state: PropTypes.shape({\n      from: PropTypes.string,\n    }),\n  }),\n};\n\nMovieDetailsPage.defaultProps = {\n  location: {\n    state: {\n      from: '/',\n    },\n  },\n};\n\nexport default MovieDetailsPage;\n","import * as API from '../api/apiMoviedb';\nimport { useState, useEffect } from 'react';\n\nexport const useMovieDetails = (movieId) => {\n  const [movieDetails, setMovieDetails] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchMovieDetails() {\n      const details = await API.getMovieDetails(movieId);\n      setMovieDetails(details);\n    }\n    fetchMovieDetails();\n  }, [movieId]);\n\n  return { movieDetails };\n};\n","import axios from 'axios';\n\nconst API_KEY = 'f864ef6a91b9e0820f1a60a4087912c5';\nconst BASE_URL ='https://api.themoviedb.org/3/';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\naxios.defaults.baseURL = BASE_URL;\n\nexport const getTrending = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  const movies = response.data.results.map(({ id, title }) => ({ id, title }));\n  return movies;\n};\n\nexport const searchMovies = async inputValue => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${inputValue}&language=en-US&page=1`\n  );\n  const movies = response.data.results.map(({ id, title }) => ({ id, title }));\n  return movies;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  const movie = response.data;\n  return movie;\n};\n\nexport const getMovieCredits = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const credits = response.data.cast.map(\n    ({ name, character, profile_path, id }) => ({\n      name,\n      character,\n      profile_path,\n      id,\n    })\n  );\n  return credits;\n};\n\nexport const getMoviesReviews = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const reviews = response.data.results.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n  return reviews;\n};\n\n"],"names":["MovieDetailsPage","location","movieId","useParams","useState","movieDetails","setMovieDetails","useEffect","API","details","fetchMovieDetails","useMovieDetails","isLoading","backLinkHref","state","from","to","type","title","release_date","substring","src","poster_path","alt","original_title","vote_average","Math","round","toFixed","overview","genres","map","genre","name","join","Suspense","fallback","defaultProps","API_KEY","axios","getTrending","response","movies","data","results","id","searchMovies","inputValue","getMovieDetails","movie","getMovieCredits","moviesId","credits","cast","character","profile_path","getMoviesReviews","reviews","author","content"],"sourceRoot":""}