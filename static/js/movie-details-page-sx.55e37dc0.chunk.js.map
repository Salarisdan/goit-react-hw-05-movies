{"version":3,"file":"static/js/movie-details-page-sx.55e37dc0.chunk.js","mappings":"sQA4DA,EAvDyB,WAAO,IAAD,UACrBA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,ECJ6B,SAACA,GAC9B,OAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGACwBC,EAAAA,GAAoBN,GAD5C,OACQO,EADR,OAEEH,EAAgBG,GAFlB,4CADc,uBAAC,WAAD,wBAKdC,EACD,GAAE,CAACR,IAEG,CAAEG,aAAAA,EACV,CDRqCM,CAAgBT,GAA5CG,EAAR,EAAQA,aAAcO,EAAtB,EAAsBA,UAGhBC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAE7C,OAAIJ,GACK,yCAIP,4BACE,SAAC,KAAD,CAAMK,GAAIJ,EAAV,UACE,mBAAQK,KAAK,SAAb,wBAGF,0BACGb,EAAac,MADhB,yBACyBd,EAAae,oBADtC,aACyB,EAA2BC,UAAU,EAAG,UADjE,QACuE,GADvE,QAIA,gBACEC,IAAG,yDAAoDjB,EAAakB,aACpEC,IAAKnB,EAAaoB,kBAGpB,uCACc,IACXpB,EAAaqB,aAAeC,KAAKC,OAAmC,GAA5BvB,EAAaqB,cAAmBG,QAAQ,GAAK,GAFxF,QAKA,sCACA,uBAAIxB,EAAayB,YAEjB,oCACA,iCAAIzB,EAAa0B,cAAjB,aAAI,EAAqBC,KAAI,SAACC,GAAD,OAAWA,EAAMC,IAAjB,IAAuBC,KAAK,QAEzD,mDAEA,2BACE,yBACE,SAAC,KAAD,CAAMlB,GAAE,UAAKf,EAAL,SAAR,qBAEF,yBACE,SAAC,KAAD,CAAMe,GAAE,UAAKf,EAAL,YAAR,2BAIJ,SAAC,EAAAkC,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,sKExDKC,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QADgB,gCAGT,IAAMC,EAAW,mCAAG,sGACFD,EAAAA,EAAAA,IAAA,sCAAyCD,IADvC,cACnBG,EADmB,OAEnBC,EAASD,EAASE,KAAKC,QAAQZ,KAAI,kBAAoB,CAAEa,GAAtB,EAAGA,GAAuB1B,MAA1B,EAAOA,MAAP,IAFhB,kBAGlBuB,GAHkB,2CAAH,qDAcXI,EAAe,mCAAG,WAAM5C,GAAN,yFACNqC,EAAAA,EAAAA,IAAA,iBACXrC,EADW,oBACQoC,EADR,oBADM,cACvBG,EADuB,OAIvBM,EAAQN,EAASE,KAJM,kBAKtBI,GALsB,2CAAH,sDAQfC,EAAe,mCAAG,WAAMC,GAAN,yFACNV,EAAAA,EAAAA,IAAA,iBACXU,EADW,4BACiBX,EADjB,oBADM,cACvBG,EADuB,OAIvBS,EAAUT,EAASE,KAAKQ,KAAKnB,KACjC,kBAA4C,CAC1CE,KADF,EAAGA,KAEDkB,UAFF,EAASA,UAGPC,aAHF,EAAoBA,aAIlBR,GAJF,EAAkCA,GAAlC,IAL2B,kBAYtBK,GAZsB,2CAAH,sDAefI,EAAgB,mCAAG,WAAML,GAAN,yFACPV,EAAAA,EAAAA,IAAA,iBACXU,EADW,4BACiBX,EADjB,2BADO,cACxBG,EADwB,OAIxBc,EAAUd,EAASE,KAAKC,QAAQZ,KAAI,kBAA8B,CACtEwB,OADwC,EAAGA,OAE3CC,QAFwC,EAAWA,QAGnDZ,GAHwC,EAAoBA,GAApB,IAJZ,kBASvBU,GATuB,2CAAH,qD","sources":["pages/MovieDetailsPageSx.jsx","utils/hooks/MovieDetails.jsx","utils/api/apiMoviedbSx.jsx"],"sourcesContent":["\nimport { Outlet, Link, useParams, useLocation } from 'react-router-dom';\nimport { useMovieDetails } from 'utils/hooks/MovieDetails';\nimport { Suspense } from 'react';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const { movieDetails, isLoading } = useMovieDetails(movieId);\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <Link to={backLinkHref}>\n        <button type=\"button\">Go back</button>\n      </Link>\n\n      <h2>\n        {movieDetails.title} ({movieDetails.release_date?.substring(0, 4) ?? ''})\n      </h2>\n\n      <img\n        src={`https://image.tmdb.org/t/p/w300_and_h450_bestv2${movieDetails.poster_path}`}\n        alt={movieDetails.original_title}\n      />\n\n      <p>\n        User Score:{' '}\n        {movieDetails.vote_average ? Math.fround(movieDetails.vote_average * 10).toFixed(0) : ''}\n        %\n      </p>\n      <h3>Overview</h3>\n      <p>{movieDetails.overview}</p>\n\n      <h4>Genres</h4>\n      <p>{movieDetails.genres?.map((genre) => genre.name).join(' ')}</p>\n\n      <p>Additional information</p>\n\n      <ul>\n        <li>\n          <Link to={`${movieId}/cast`}>Cast</Link>\n        </li>\n        <li>\n          <Link to={`${movieId}/reviews`}>Reviews</Link>\n        </li>\n      </ul>\n\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n","import * as API from '../api/apiMoviedbSx';\nimport { useState, useEffect } from 'react';\n\nexport const useMovieDetails = (movieId) => {\n  const [movieDetails, setMovieDetails] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchMovieDetails() {\n      const details = await API.getMovieDetails(movieId);\n      setMovieDetails(details);\n    }\n    fetchMovieDetails();\n  }, [movieId]);\n\n  return { movieDetails };\n};\n","import axios from 'axios';\n\nconst API_KEY = 'f864ef6a91b9e0820f1a60a4087912c5';\nconst BASE_URL ='https://api.themoviedb.org/3/';\naxios.defaults.baseURL = BASE_URL;\n\nexport const getTrending = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  const movies = response.data.results.map(({ id, title }) => ({ id, title }));\n  return movies;\n};\n\nexport const searchMovies = async inputValue => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${inputValue}&language=en-US&page=1`\n  );\n  const movies = response.data.results.map(({ id, title }) => ({ id, title }));\n  return movies;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  const movie = response.data;\n  return movie;\n};\n\nexport const getMovieCredits = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const credits = response.data.cast.map(\n    ({ name, character, profile_path, id }) => ({\n      name,\n      character,\n      profile_path,\n      id,\n    })\n  );\n  return credits;\n};\n\nexport const getMoviesReviews = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const reviews = response.data.results.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n  return reviews;\n};\n\n"],"names":["movieId","useParams","useState","movieDetails","setMovieDetails","useEffect","API","details","fetchMovieDetails","useMovieDetails","isLoading","backLinkHref","useLocation","state","from","to","type","title","release_date","substring","src","poster_path","alt","original_title","vote_average","Math","fround","toFixed","overview","genres","map","genre","name","join","Suspense","fallback","API_KEY","axios","getTrending","response","movies","data","results","id","getMovieDetails","movie","getMovieCredits","moviesId","credits","cast","character","profile_path","getMoviesReviews","reviews","author","content"],"sourceRoot":""}